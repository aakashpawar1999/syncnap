generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum SyncStatus {
  SUCCESS
  PROGRESS
  FAILURE
}

model User {
  id                  String               @id @default(uuid())
  name                String?
  email               String               @unique
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  deletedAt           DateTime?
  supabaseConnections SupabaseConnection[]
  airtableConnections AirtableConnection[]
  syncMappings        SyncMapping[]
  syncLogs            SyncLog[]
}

model SupabaseConnection {
  id             String        @id @default(uuid())
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  connectionName String
  anonApiKey     String
  projectUrl     String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?
  SyncMapping    SyncMapping[]
}

model AirtableConnection {
  id             String        @id @default(uuid())
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  connectionName String
  accessToken    String
  baseId         String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?
  SyncMapping    SyncMapping[]
}

model SyncMapping {
  id                   String             @id @default(uuid())
  userId               String
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  supabaseConnectionId String
  supabaseConnections  SupabaseConnection @relation(fields: [supabaseConnectionId], references: [id])
  airtableConnectionId String
  airtableConnections  AirtableConnection @relation(fields: [airtableConnectionId], references: [id])
  supabaseTable        String
  airtableTable        String
  airtableDisplayName  String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  deletedAt            DateTime?
  syncLogs             SyncLog[]
}

model SyncLog {
  id            String      @id @default(uuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  syncMappingId String
  SyncMapping   SyncMapping @relation(fields: [syncMappingId], references: [id])
  status        SyncStatus
  details       String?
  createdAt     DateTime    @default(now())
}
